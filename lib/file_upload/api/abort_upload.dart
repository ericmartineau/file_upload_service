// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'dart:convert';

import 'package:dartxx/json_path.dart';
import 'package:sunny_sdk_core/mverse/m_model.dart';

import '../mixins/sunny_main.dart'; // ignore: unused_import, directives_ordering

class AbortUpload extends AbortUploadBase with AbortUploadMixin {
  AbortUpload(Map<String, dynamic> wrapped, {MSchemaRef mtype = AbortUploadRef, bool update = true})
      : super(wrapped, mtype: mtype, update: update);

  factory AbortUpload.fromJson(wrapped) => wrapped is AbortUpload ? wrapped : AbortUpload(wrapped as Map<String, dynamic>);

  AbortUpload.of({required String keyName})
      : super.of(
          keyName: keyName,
        );

  @override
  String? get keyName => _keyName;
  @override
  set keyName(String? keyName) {
    this._keyName = keyName;
    wrapped['keyName'] = jsonLiteral(keyName);
  }
}

abstract class AbortUploadBase extends MModel {
  AbortUploadBase(Map<String, dynamic> wrapped, {MSchemaRef mtype = AbortUploadRef, bool? update})
      : super(wrapped, mtype: mtype, update: false) {
    if (update == true) takeFromMap(wrapped, copyEntries: false);
  }

  AbortUploadBase.fromJson(wrapped) : this(wrapped as Map<String, dynamic>, update: true);
  AbortUploadBase.of({String? keyName}) : super(<String, dynamic>{}, mtype: AbortUploadRef) {
    if (keyName != null) this.keyName = keyName;
  }

  String? _keyName;

  /// Property getter and setter for keyName:
  String? get keyName;
  set keyName(String? keyName);

  @override
  String toString() => json.encode(wrapped).toString();
  dynamic toJson() => wrapped;

  @override
  operator [](key) {
    switch (key) {
      case "keyName":
        return this.keyName;
      default:
        return wrapped[key];
    }
  }

  @override
  operator []=(String key, value) {
    switch (key) {
      case "keyName":
        this.keyName = value as String;
        break;
      default:
        wrapped[key] = value;
    }
  }

  @override
  void takeFrom(source) {
    if (source == null) return;
    if (source is Map<String, dynamic>) {
      takeFromMap(source, copyEntries: true);
    } else if (source is MModel) {
      takeFromMap(source.wrapped, copyEntries: true);
    } else {
      throw ("Can't take values from unknown type ${source.runtimeType}");
    }
  }

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true}) {
    if (from == null) return;

    super.takeFromMap(from, copyEntries: copyEntries);
    for (final entry in from.entries) {
      final key = entry.key;
      final value = entry.value;
      if (value == null) continue;
      switch (key) {
        case "keyName":
          _keyName = value as String;
          break;
        default:
          break;
      }
    }
  }

  @override
  AbortUpload clone() => this as AbortUpload;

  @override
  Set<String> get mfields => AbortUploadFields.values;
}

class AbortUploadFields {
  static const keyName = "keyName";
  static const Set<String> values = {keyName};
}

class AbortUploadPaths {
  static const JsonPath<String> keyName = JsonPath.internal(["keyName"], "/keyName");
  static final Set<JsonPath> values = {keyName};
}

const AbortUploadRef = MSchemaRef("mverse", "sunnyMain", "abortUpload", "0.0.1", "ephemeral");
