// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'dart:convert';

import 'package:sunny_dart/helpers/maps.dart';
import 'package:dartxx/json_path.dart';
import 'package:sunny_sdk_core/mverse/m_model.dart';

import '../mixins/sunny_main.dart'; // ignore: unused_import, directives_ordering

class StartUpload extends StartUploadBase with StartUploadMixin {
  StartUpload(Map<String, dynamic> wrapped, {MSchemaRef mtype = StartUploadRef, bool update = true})
      : super(wrapped, mtype: mtype, update: update);

  factory StartUpload.fromJson(wrapped) => wrapped is StartUpload ? wrapped : StartUpload(wrapped as Map<String, dynamic>);

  StartUpload.of({
    String? uploadId,
    String? mediaId,
  }) : super.of(
          uploadId: uploadId,
          mediaId: mediaId,
        );

  @override
  String? get uploadId => _uploadId;

  @override
  String? get mediaId => _mediaId;

  @override
  set uploadId(String? uploadId) {
    this._uploadId = uploadId;
    wrapped['uploadId'] = jsonLiteral(uploadId);
  }

  @override
  set mediaId(String? mediaId) {
    this._mediaId = mediaId;
    wrapped['mediaId'] = jsonLiteral(mediaId);
  }
}

abstract class StartUploadBase extends MModel {
  StartUploadBase(Map<String, dynamic> wrapped, {MSchemaRef mtype = StartUploadRef, bool? update})
      : super(wrapped, mtype: mtype, update: false) {
    if (update == true) takeFromMap(wrapped, copyEntries: false);
  }

  StartUploadBase.fromJson(wrapped) : this(wrapped as Map<String, dynamic>, update: true);
  StartUploadBase.of({
    String? uploadId,
    String? mediaId,
  }) : super(<String, dynamic>{}, mtype: StartUploadRef) {
    if (uploadId != null) this.uploadId = uploadId;
    if (mediaId != null) this.mediaId = mediaId;
  }

  String? _uploadId;
  String? _mediaId;

  /// Property getter and setter for uploadId:
  String? get uploadId;
  set uploadId(String? uploadId);

  /// Property getter and setter for mediaId:
  String? get mediaId;
  set mediaId(String? mediaId);

  @override
  String toString() => json.encode(wrapped).toString();
  dynamic toJson() => wrapped;

  @override
  operator [](key) {
    switch (key) {
      case "uploadId":
        return this.uploadId;
      case "mediaId":
        return this.mediaId;
      default:
        return wrapped[key];
    }
  }

  @override
  operator []=(String key, value) {
    switch (key) {
      case "uploadId":
        this.uploadId = value as String;
        break;
      case "mediaId":
        this.mediaId = value as String;
        break;
      default:
        wrapped[key] = value;
    }
  }

  @override
  void takeFrom(source) {
    if (source == null) return;
    if (source is Map<String, dynamic>) {
      takeFromMap(source, copyEntries: true);
    } else if (source is MModel) {
      takeFromMap(source.wrapped, copyEntries: true);
    } else {
      throw ("Can't take values from unknown type ${source.runtimeType}");
    }
  }

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true}) {
    if (from == null) return;

    super.takeFromMap(from, copyEntries: copyEntries);
    for (final entry in from.entries) {
      final key = entry.key;
      final value = entry.value;
      if (value == null) continue;
      switch (key) {
        case "uploadId":
          _uploadId = value as String;
          break;
        case "mediaId":
          _mediaId = value as String;
          break;
        default:
          break;
      }
    }
  }

  @override
  StartUpload clone() => StartUpload.fromJson(deepCloneMap(wrapped));

  @override
  Set<String> get mfields => StartUploadFields.values;
}

class StartUploadFields {
  static const uploadId = "uploadId";
  static const mediaId = "mediaId";
  static const Set<String> values = {
    uploadId,
    mediaId,
  };
}

class StartUploadPaths {
  static const JsonPath<String> uploadId = JsonPath.internal(["uploadId"], "/uploadId");
  static const JsonPath<String> mediaId = JsonPath.internal(["mediaId"], "/mediaId");
  static final Set<JsonPath> values = {uploadId, mediaId};
}

const StartUploadRef = MSchemaRef("mverse", "sunnyMain", "startUpload", "0.0.1", "ephemeral");
