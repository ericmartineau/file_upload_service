// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'dart:convert';

import 'package:dartxx/json_path.dart';
import 'package:sunny_sdk_core/mverse/m_model.dart';

import '../mixins/sunny_main.dart'; // ignore: unused_import, directives_ordering

class UploadRequest extends UploadRequestBase with UploadRequestMixin {
  UploadRequest(Map<String, dynamic> wrapped, {MSchemaRef mtype = UploadRequestRef, bool update = true})
      : super(wrapped, mtype: mtype, update: update);

  factory UploadRequest.fromJson(wrapped) => wrapped is UploadRequest ? wrapped : UploadRequest(wrapped as Map<String, dynamic>);

  UploadRequest.of({String? path})
      : super.of(
          path: path,
        );

  @override
  String? get path => _path;
  @override
  set path(String? path) {
    this._path = path;
    wrapped['path'] = jsonLiteral(path);
  }
}

abstract class UploadRequestBase extends MModel {
  UploadRequestBase(Map<String, dynamic> wrapped, {MSchemaRef mtype = UploadRequestRef, bool? update})
      : super(wrapped, mtype: mtype, update: false) {
    if (update == true) takeFromMap(wrapped, copyEntries: false);
  }

  UploadRequestBase.fromJson(wrapped) : this(wrapped as Map<String, dynamic>, update: true);
  UploadRequestBase.of({String? path}) : super(<String, dynamic>{}, mtype: UploadRequestRef) {
    if (path != null) this.path = path;
  }

  String? _path;

  /// Property getter and setter for path:
  String? get path;
  set path(String? path);

  @override
  String toString() => json.encode(wrapped).toString();
  dynamic toJson() => wrapped;

  @override
  operator [](key) {
    switch (key) {
      case "path":
        return this.path;
      default:
        return wrapped[key];
    }
  }

  @override
  operator []=(String key, value) {
    switch (key) {
      case "path":
        this.path = value as String;
        break;
      default:
        wrapped[key] = value;
    }
  }

  @override
  void takeFrom(source) {
    if (source == null) return;
    if (source is Map<String, dynamic>) {
      takeFromMap(source, copyEntries: true);
    } else if (source is MModel) {
      takeFromMap(source.wrapped, copyEntries: true);
    } else {
      throw ("Can't take values from unknown type ${source.runtimeType}");
    }
  }

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true}) {
    if (from == null) return;

    super.takeFromMap(from, copyEntries: copyEntries);
    for (final entry in from.entries) {
      final key = entry.key;
      final value = entry.value;
      if (value == null) continue;
      switch (key) {
        case "path":
          _path = value as String;
          break;
        default:
          break;
      }
    }
  }

  @override
  UploadRequest clone() => this as UploadRequest;

  @override
  Set<String> get mfields => UploadRequestFields.values;
}

class UploadRequestFields {
  static const path = "path";
  static const Set<String> values = {path};
}

class UploadRequestPaths {
  static const JsonPath<String> path = JsonPath.internal(["path"], "/path");
  static final Set<JsonPath> values = {path};
}

const UploadRequestRef = MSchemaRef("mverse", "sunnyMain", "uploadRequest", "0.0.1", "ephemeral");
