// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'dart:convert';

import 'package:dartxx/json_path.dart';
import 'package:sunny_sdk_core/mverse/m_model.dart';

import '../mixins/sunny_main.dart'; // ignore: unused_import, directives_ordering

class ETagResponse extends ETagResponseBase with ETagResponseMixin {
  ETagResponse(Map<String, dynamic> wrapped, {MSchemaRef mtype = ETagResponseRef, bool update = true})
      : super(wrapped, mtype: mtype, update: update);

  factory ETagResponse.fromJson(wrapped) => wrapped is ETagResponse ? wrapped : ETagResponse(wrapped as Map<String, dynamic>);

  ETagResponse.of({String? partName, int? partNumber})
      : super.of(
          partName: partName,
          partNumber: partNumber,
        );

  @override
  String? get partName => _partName;
  @override
  set partName(String? partName) {
    this._partName = partName;
    wrapped['partName'] = jsonLiteral(partName);
  }

  @override
  int? get partNumber => _partNumber;
  @override
  set partNumber(int? partNumber) {
    this._partNumber = partNumber;
    wrapped['partNumber'] = jsonLiteral(partNumber);
  }
}

abstract class ETagResponseBase extends MModel {
  ETagResponseBase(Map<String, dynamic> wrapped, {MSchemaRef mtype = ETagResponseRef, bool? update})
      : super(wrapped, mtype: mtype, update: false) {
    if (update == true) takeFromMap(wrapped, copyEntries: false);
  }

  ETagResponseBase.fromJson(wrapped) : this(wrapped as Map<String, dynamic>, update: true);
  ETagResponseBase.of({String? partName, int? partNumber}) : super(<String, dynamic>{}, mtype: ETagResponseRef) {
    if (partName != null) this.partName = partName;
    if (partNumber != null) this.partNumber = partNumber;
  }

  String? _partName;

  /// Property getter and setter for partName:
  String? get partName;
  set partName(String? partName);

  int? _partNumber;

  /// Property getter and setter for partNumber:
  int? get partNumber;
  set partNumber(int? partNumber);

  @override
  String toString() => json.encode(wrapped).toString();
  dynamic toJson() => wrapped;

  @override
  operator [](key) {
    switch (key) {
      case "partName":
        return this.partName;
      case "partNumber":
        return this.partNumber;
      default:
        return wrapped[key];
    }
  }

  @override
  operator []=(String key, value) {
    switch (key) {
      case "partName":
        this.partName = value as String;
        break;
      case "partNumber":
        this.partNumber = value as int;
        break;
      default:
        wrapped[key] = value;
    }
  }

  @override
  void takeFrom(source) {
    if (source == null) return;
    if (source is Map<String, dynamic>) {
      takeFromMap(source, copyEntries: true);
    } else if (source is MModel) {
      takeFromMap(source.wrapped, copyEntries: true);
    } else {
      throw ("Can't take values from unknown type ${source.runtimeType}");
    }
  }

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true}) {
    if (from == null) return;

    super.takeFromMap(from, copyEntries: copyEntries);
    for (final entry in from.entries) {
      final key = entry.key;
      final value = entry.value;
      if (value == null) continue;
      switch (key) {
        case "partName":
          _partName = value as String;
          break;
        case "partNumber":
          _partNumber = value as int;
          break;
        default:
          break;
      }
    }
  }

  @override
  ETagResponse clone() => this as ETagResponse;

  @override
  Set<String> get mfields => ETagResponseFields.values;
}

class ETagResponseFields {
  static const partName = "partName";
  static const partNumber = "partNumber";
  static const Set<String> values = {partName, partNumber};
}

class ETagResponsePaths {
  static const JsonPath<String> partName = JsonPath.internal(["partName"], "/partName");
  static const JsonPath<int> partNumber = JsonPath.internal(["partNumber"], "/partNumber");
  static final Set<JsonPath> values = {partName, partNumber};
}

const ETagResponseRef = MSchemaRef("mverse", "sunnyMain", "eTagResponse", "0.0.1", "ephemeral");
